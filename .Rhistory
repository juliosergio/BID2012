attach(ex1) # anexando os dados na memória do R
names(ex1)
dim(ex1)
#---------------------------------------?-------------------
# Gráfico com as 3 variáveis em estudo em 2D
#---------------------------------------?-------------------
require(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
#---------------------------------------?-------------------
# Gráfico com as 3 variáveis em estudo em 3D
#---------------------------------------?-------------------
rm(list=ls()) # comando para limpar a memória do R
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8?.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32?,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10?,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460?,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8?.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32?,18.75,19.83,10.75)
Y=c(16.68,11.5,12.03,14.88,13.75,18.11,8.0,17.83,79.24,21.5,40.33,21,13.5,
19.75,24,29,15.35,19,9.5,35.1,17.9,52.32,18.75,19.83,10.75)
X1=c(7,3,3,4,6,7,2,7,30,5,16,10,4,6,9,10,6,7,3,17,10,26,9,8,4)
X2=c(560,220,340,80,150,330,110,210,1460,605,688,215,255,462,448,776,200,
132,36,770,140,810,450,635,150)
ex1=as.data.frame(cbind(Y,X1,X2)); ex1
attach(ex1) # anexando os dados na memória do R
names(ex1)
dim(ex1)
require(scatterplot3d)
install.packages("scatterplot3d")
require(scatterplot3d)
fig = scatterplot3d(X1,X2,Y, box=F, type='p', lwd=1, pch=19,
xlim=c(0,50), ylim=c(0,1500), zlim=c(0,150))
plano = lm(Y~X1+X2)
fig$plane3d(plano, lty.box = "solid")
#---------------------------------------?-------------------
# Gráfico com as 3 variáveis em estudo em 3D
#---------------------------------------?-------------------
require(Rcmdr)
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
scatter3d(X1, Y, X2, ellipsoid=F, surface=T, point.col='yellow',
bg='black', sphere.size=1.2, revolutions=1, axis.col='white',
xlab="Quantidade Estocada", ylab="Tempo (min)", zlab="Distancia (pes)")
?gamma
gamma(0+1)
gamma(2)
curve(gamma, xlim=c(0,10))
curve(gamma, xlim=c(0,8))
factorial(8)
factorial(7)
curve(gamma, xlim=c(0,6))
gamma(-1)
curve(gamma, xlim=c(0,5))
curve(gamma, xlim=c(0,4))
curve(gamma, xlim=c(0,5}))
curve(gamma, xlim=c(0,5))
shiny::runApp('Progs/R/App-1')
system.file("examples", package="shiny")
runExample("02_text")
library("swirl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
detach("package:swirl", unload=TRUE)
install.packages("manipulate")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=F)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, id_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
install.packages(c("KernSmooth", "manipulate", "MASS", "shiny"))
setwd("~/Mega/BID2012")
set.seed(1) # just to get the same random numbers
par(xpd=FALSE) # this is usually the default
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2), bty='L')
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par()
?par
par(mar)
par("mar")
par("xpd")
par(xpd=F)
par("xpd")
?legend
9.5/3.1
?par
pp <- par(xpd=F)
pp
par(pp)
ff <- function(a="uno", b="dos") {print(a); print(b)}
ff()
ff(list(a="tres",b="cuatro"))
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
gpar
par("xpd")
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
par()
pdf()
par()
dev.off()
dev.off()
?dev.off()
pdf()
dev.cur()
par()
dev.off()
pdf()
dev.cur()
par("xpd")
par("mar")
par(mar=c(5.1,4.1,4.1,10))
par("mar")
dev.off()
par("mar")
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
par("mar")
par("xpd")
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
?segments
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
?textbox
??textbox
mtext
?mtext
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
View(MegaT)
?abline
abline(0, 0.5)
source('~/Mega/BID2012/TendAnomaliaMensGrf.R')
source('~/Mega/BID2012/TendAnomaliaMensGrf.R')
ff1
MegaT
tt <- filter(MegaT, cuenca=cuencas[1])
tt <- filter(MegaT, cuenca==cuencas[1])
View(tt)
f1
var
fmod
ffmod
ffmod <- function(vv) {
mm <- lm(vv ~ anio)
mm
}
xx <- tt %>%
?coef
ffmod <- function(vv) {
mm <- lm(vv ~ anio)
pend <-coef(mm)[2]
pend
}
xx <- tt %>%
group_by(mes) %>%
summarise(mTmax)
trace()
xx <- tt %>%
group_by(mes) %>%
summarise(pend=ffmod(mTmax))
?split
xx <- split(tt, tt$mes)
xx
xx[1]
class(xx)
View(xx[1])
View(xx[[1]])
xx[[1]]$anio
?lm
df
?df
ffmod <- function(ddf, v) {
mm <- lm(ddf[[v]] ~ ddf$anio)
coef(mm)[2]
}
?sapply
sapply(xx, ffmod, "mTmax")
aa <- sapply(xx, ffmod, "mTmax")
aa
plot(aa, type="l")
meses
Meses
?plot
plot(aa, type="l", xaxt=F)
plot(aa, type="l", xaxt="n")
axis(1, at=1:12, lab=Meses)
xx[1]
xx[2]
xx[3]
xx[4]
xx[5]
xx[6]
xx[7]
xx[8]
xx[9]
xx[10]
xx[11]
xx[12]
ddf <- xx[[1]]
v="mTmax"
mm <- lm(ddf[[v]] ~ ddf$anio)
mm
source('~/Mega/BID2012/PendientesTendMensGrf.R')
plot(aa, type="l", xaxt="n")
graphics.off()
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
dev.cur()
dev.list()
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
?pdf
?dev.new
source('~/Mega/BID2012/PendientesTendMensGrf.R')
tt
View(tt)
fff <- function (x, y) {
mm <- lm(y ~ x)
coef(mm)[2]
}
ttr <- tt %>% group_by(mes) %>%
summarise(mpp=fff(anio, ppAcc), mmTmax=fff(anio,mTmax), mmTmin=fff(anio,mTmin))
ttr
aApp
source('~/Mega/BID2012/PendientesTendMensGrf.R')
ttr
aTmax
ttrr <- MegaT %>%
group_by(cuenca, mes) %>%
summarise(aApp=fff(anio, ppAcc),
aTmax=fff(anio,mTmax),
aTmin=fff(anio,mTmin))
ttrr
View(ttrr)
source('~/Mega/BID2012/PendientesTendMensGrf.R')
?axis
?legend
letters
?letters
LETTERS
list(c(1,1), c(2,2))
?par
?pdf
?plot
plot(x=c(0,1), y=c(0,1), xlab=NULL, ylab=NULL)
plot(x=c(0,1), y=c(0,1), xlab="", ylab=NULL)
getwd()
tt <- read.table("GLOBAL//MegaTabla.txt")
head(tt)
?select
tt <- tbl_df(read.table("GLOBAL//MegaTabla.txt", header=T))
tt
tt %>% rename (pp = ppAcc)
tt %>% filter(1:3)
tt %>% select(1:3)
tt %>% select(c(1,3))
tt %>% select(1,3)
library(dplyr)
library(bitops) # operaciones con bits
# Directorio de información global
glob <- "GLOBAL" # En este se guardará la MegaTabla
fname <- paste0(glob, "/MegaTabla.txt")
dirGraf <- paste0(glob, "/GRAFICOS/PendientesMensual/") # Directorio de gráficos
Meses <- c("Ene","Feb","Mar","Abr","May","Jun",
"Jul","Ago","Sep","Oct","Nov","Dic")
# +--- ***FUNCIÓN DE MODELO*** ---+
# |        usando dplyr           |
fff <- function (x, y) {
# función sólo en términos
# de las columnas para usar
# con "dplyr"
mm <- lm(y ~ x)
coef(mm)[2]
}
# |                               |
# +-FIN ***FUNCIÓN DE MODELO***  -+
# La gran tabla que incluye "todo":
MegaT <-  tbl_df(read.table(fname, header=T))
# Averiguamos las cuencas
cuencas <- levels(MegaT$cuenca)
nc <- length(cuencas)
# =================================================
# MÉDULA DE LOS CÁLCULOS
# Agrupemos por (mes, cuenca, anio) y hagamos el
# resumen de los datos
MegaT <- MegaT %>%
group_by(mes, cuenca, anio) %>%
summarise(ppAcc = mean(ppAcc), mTmax = mean(mTmax), mTmin =mean(mTmin))
# =================================================
# +----- ***USARE ESTA ALTERNATIVA*** ------+
# |               usando dplyr              |
# |             aquí usaré MegaT            |
ttrr <- MegaT %>%
group_by(cuenca, mes) %>%
summarise(
aApp=fff(anio, ppAcc),
aTmax=fff(anio,mTmax),
aTmin=fff(anio,mTmin))
# |  la tabla resultante solo hay que       |
# |  separarla con filter o split           |
# |  por cuenca                             |
# +-FIN- ****USARE ESTA ALTERNATIVA*** -----+
# +-------- Rango de las Y, por variable ----------+
# +--------+-------------+-------------+-----------+
# |        |   precip    |   Tmax      |   Tmin    |
yr <- list(c(-2.5, 2.5), c(-0.1, 0.1), c(-0.1, 0.1))
View(ttrr)
cc <- cuencas[1]
cc
tt <- ttrr %>%
filter(cuenca=cc) %>%
tt
tt <- ttrr %>%
filter(cuenca=cc)
ttrr
tt <- ttrr %>%
filter(cuenca==cc)
tt
if T "algo" else "otro"
if (T) "algo" else "otro"
if (F) "algo" else "otro"
paste(LETTERS[1:10], cuencas)
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
tt
tt <- ttrr %>%
filter(cuenca==cc) %>%
select(mes, 2+jj) # El mes y la variable correspondiente
tt
xx <- ttrr %>%
filter(cuenca==cc)
xx
ungroup
?ungroup
tt <- ttrr %>%
filter(cuenca==cc) %>%
ungroup %>%
select(mes, 2+jj) # El mes y la variable correspondiente
tt
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
tt
yr[[1]]
par("mar")
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
print(par("mar"))
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
tt
?pdf
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
yr
debugSource('~/Mega/BID2012/AltPendientesTendMensGrf.R')
warnings()
?plot
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
?plot
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
?text
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
?legend
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
library(dplyr)
# Directorio base
bdir <- "CUENCAS"
# Directorio de información global
glob <- "GLOBAL" # En este se guardará la MegaTabla
cuencas <- list.files(bdir) # orden alfabético
ord
cuencas
ord <- c(  2  ,   8  ,   5   ,   6  ,  7   ,  10  ,  4  ,  3   ,   9  ,  1 )
cuencas[ord]
ord <- c( 10  ,  1  ,   8   ,   7  ,   3   ,   4  ,  5  ,  2   ,  9  ,  6 )
cuencas[ord]
source('~/Mega/BID2012/HacerMegaTabla.R')
View(MegaT)
source('~/Mega/BID2012/AnomaliaMensGraficos.R')
source('~/Mega/BID2012/TendAnomaliaMensGrf.R')
source('~/Mega/BID2012/PendientesTendMensGrf.R')
source('~/Mega/BID2012/AltPendientesTendMensGrf.R')
levels(MegaT$cuenca)
source('~/Mega/BID2012/HacerMegaTabla.R')
cuencas
levels(MegaT$cuenca)
library(dplyr)
library(bitops) # operaciones con bits
# Directorio de información global
glob <- "GLOBAL" # En este se guardará la MegaTabla
fname <- paste0(glob, "/MegaTabla.txt")
dirGraf <- paste0(glob, "/GRAFICOS/AnomaliasMensual/") # Directorio de gráficos
graphics.off()
gpar <- list(mar=c(5.1, 4.1, 4.1, 3.15*4.1), xpd=F)
Meses <- c("Ene","Feb","Mar","Abr","May","Jun",
"Jul","Ago","Sep","Oct","Nov","Dic")
# Los colores que usaré para cada cuenca
colores <- colors()[c(12,31,35,41,90,100,121,456,496,653)] # diez colores
# Función para graficar: selecciona ya sea "plot" o "lines"
gfun <- function (...) {
mask <- as.integer(bitShiftL(1L,gii)) # gi==0,1,..
if (as.integer(bitAnd(gflag,mask))==0L) {
#>> print(paste0("PLOT--- m:",mask," gfA:",gflag," dv:",dev.cur()))
# Se prende el bit 'gi' en la variable global
gflag <<- as.integer(bitOr(gflag,mask));
plot(..., type="l")
#>> print(paste0("      gfB:",gflag))
} else {
#>> print(paste0("LINES--- m:",mask," gfA:",gflag," dv:",dev.cur()))
lines(...)
}
}
# Se incializa con:
gflag <- 0L
gii <- 0 # se incrementará: 0,1,2,...
# La gran tabla que incluye "todo":
MegaT <-  tbl_df(read.table(fname, header=T))
# Averiguamos las cuencas
cuencas <- levels(MegaT$cuenca) # Aquí ya vienen en el orden correcto
cuencas
?dput
?t
